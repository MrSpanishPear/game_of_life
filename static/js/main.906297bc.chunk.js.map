{"version":3,"sources":["index.js"],"names":["Box","selectBox","props","row","col","className","this","boxClass","id","onClick","React","Component","Grid","width","cols","rowsArr","i","rows","j","boxId","gridFull","push","key","style","Main","grid","JSON","parse","stringify","state","console","log","setState","seed","Math","floor","random","playButton","clearInterval","intervalId","setInterval","play","speed","pause","g","g2","neighbors","getNeighborCount","generation","forceUpdate","clear","copy","Array","fill","map","slow","speedUp","count","nrow","Number","ncol","currGen","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.906297bc.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nclass Box extends React.Component{\n    selectBox = () => {\n        this.props.selectBox(this.props.row, this.props.col)\n    }\n    render() {\n        return(\n            <div\n                className={this.props.boxClass}\n                id={this.props.id}\n                onClick={this.selectBox}\n            />\n        )\n    }\n}\n\n\nclass Grid extends React.Component {\n\n    render() {\n        const width = (this.props.cols * 31) + 1;\n        var rowsArr = []\n         var boxClass = \"\";\n        \n        //could be replaced with map function\n        for (let i = 0; i < this.props.rows; i++){\n            for(let j = 0; j < this.props.cols; j++){\n                let boxId = i + \"_\" + j;\n                boxClass = this.props.gridFull[i][j] ? \"box on\" : \"box off\";\n\n                rowsArr.push(\n                    <Box\n                        boxClass={boxClass}\n                        key={boxId}\n                        boxId={boxId}\n                        row={i}\n                        col={j}\n                        selectBox={this.props.selectBox}\n\n                    />\n\n                );\n            }\n        }\n\n        return(\n            <div id=\"grid\" className=\"grid\" style={{width:width}}>\n                {rowsArr}\n            </div>\n        )\n        \n    }\n}\n\n\n\n\nclass Main extends React.Component {\n    constructor() {\n        super();\n        this.speed = 300;\n        this.rows = 30;\n        this.cols = 50;\n        this.state = {\n            generation: 0,\n            //Fills the grid with FALSE initially\n            gridFull: Array(this.rows).fill().map( () => Array(this.cols).fill(false))\n        }\n    }\n\n    selectBox = (row,col) =>{\n        //.slice wont work because gridFull is 2D array\n        //https://blog.andrewray.me/how-to-clone-a-nested-array-in-javascript/\n        let grid = JSON.parse(JSON.stringify(this.state.gridFull))\n        console.log(`calling select box on ${row},${col}`)\n        grid[row][col] = !grid[row][col];\n        this.setState({\n            gridFull: grid\n        })\n    }\n\n    seed = () => {\n        let grid = JSON.parse(JSON.stringify(this.state.gridFull))\n        for (let i = 0; i < this.rows; i++){\n            for(let j = 0; j < this.rows; j++){\n                //random number between 0 and 4, if 1 then: \n                let random = Math.floor(Math.random() * 4);\n                if(random === 1) {\n                    grid[i][j] = true;\n                }\n            }\n        }\n\n        this.setState({\n            gridFull: grid\n        });\n    }\n\n    playButton = () => {\n        clearInterval(this.intervalId)\n        this.intervalId = setInterval(this.play, this.speed);\n        this.play()\n    }\n    \n    pause = () => {\n        clearInterval(this.intervalId);\n    }\n\n    // sourced with edits from https://medium.com/javascript-in-plain-english/the-game-of-life-using-javascript-fc1aaec8274f\n    getNeighborCount(row, col) {\n        let count = 0;\n        let nrow=Number(row);\n        let ncol=Number(col);\n        let currGen = this.state.gridFull;\n        let rows = this.rows;\n        let cols = this.cols;\n\n        // Make sure we are not at the first row\n        if (nrow - 1 >= 0) {\n            // Check top neighbor\n            if (currGen[nrow - 1][ncol] === true) count++;\n        }\n\n        // Make sure we are not in the first cell\n        if (nrow - 1 >= 0 && ncol - 1 >= 0) {\n        //Check upper left neighbor\n            if (currGen[nrow - 1][ncol - 1] === true) count++;\n        }\n\n        // Make sure we are not on the first row last column\n        if (nrow - 1 >= 0 && ncol + 1 < cols) {\n            //Check upper right neighbor\n            if (currGen[nrow - 1][ncol + 1] === true) count++;\n        }\n            \n        // Make sure we are not on the first column\n        if (ncol - 1 >= 0) {\n            //Check left neighbor\n            if (currGen[nrow][ncol - 1] === true) count++;\n        }\n\n        // Make sure we are not on the last column\n        if (ncol + 1 < cols) {\n            \n            //Check right neighbor\n            if (currGen[nrow][ncol + 1] === true) count++;\n        }\n\n        // Make sure we are not on the bottom left corner\n        if (nrow + 1 < rows && ncol - 1 >= 0) {\n            //Check bottom left neighbor\n            if (currGen[nrow + 1][ncol - 1] === true) count++;\n        }\n\n        // Make sure we are not on the bottom right\n        if (nrow + 1 < rows && ncol + 1 < cols) {\n            //Check bottom right neighbor\n            if (ncol==0 && nrow==0) console.log(`bottom right = ${nrow + 1},${ncol +1} = ${currGen[nrow + 1][ncol + 1]}`)\n\n            if (currGen[nrow + 1][ncol + 1] === true) count++;\n        }\n        \n        \n        // Make sure we are not on the last row\n        if (nrow + 1 < rows) {\n            //Check bottom neighbor\n            if (currGen[nrow + 1][ncol] === true) count++;\n        }\n        \n        return count;\n    }\n\n    //game rules etc\n    play = () => {\n        let g = this.state.gridFull;\n        let g2 = JSON.parse(JSON.stringify(this.state.gridFull))\n      \n        for (let i = 0; i < this.rows; i++) {\n            for (let j = 0; j < this.cols; j++) {\n                let neighbors =this.getNeighborCount(i, j);\n                if ( i< 1 && j < 1) console.log(i,j, neighbors);\n                // Check the rules\n                // If Alive\n                if (g[i][j] === true) {\n                  \n                    if (neighbors < 2) {\n                        g2[i][j] = false;\n                    } else if (neighbors === 2 || neighbors === 3) {\n                        g2[i][j] = true;\n                    } else if (neighbors > 3) {\n                        g2[i][j] = false;\n                    }\n                } else if (g[i][j] === false) {\n                    // If Dead or Empty\n                \n                    if (neighbors === 3) {\n                        // Propogate the species\n                        g2[i][j] = true;//Birth?\n                    }\n                }\n            }\n        }\n\n        this.setState({\n            gridFull: g2,\n            generation: this.state.generation + 1\n        });\n\n        this.forceUpdate(); \n      \n    }\n\n    clear = () => {\n        let copy = Array(this.rows).fill().map( () => Array(this.cols).fill(false))\n        this.speed = 300;\n        this.setState({\n            gridFull: copy,\n            generation: 0,\n        });\n        this.pause()\n    }\n    slow = () => {\n        this.speed += 50;\n        this.forceUpdate(); \n    }\n    speedUp = () => {\n        this.speed -= 50;\n        this.forceUpdate(); \n    }\n    componentDidMount() {\n        // this.seed();\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>\n                    Conways Game of Life!\n                </h1>\n                <Grid\n                    gridFull={this.state.gridFull}\n                    rows={this.rows}\n                    cols={this.cols}\n                    selectBox={this.selectBox}\n                />\n                <h2>\n                    Generation: {this.state.generation}\n                </h2>\n                <h2>\n                    Speed: Update every {this.speed}ms\n                </h2>\n                <div className=\"buttonContainer\">\n                    <button \n                        onClick={this.playButton}\n                        className={\"button\"}\n\n                    >\n                        Play\n                    </button>\n                    <button\n                        onClick={this.pause}\n                        className={\"button\"}\n                    >\n                        Pause\n                    </button>\n                    <button\n                        onClick={this.clear}\n                        className={\"button\"}\n                    >\n                        Clear\n                    </button>\n                    <button\n                        onClick={this.seed}\n                        className={\"button\"}\n                    >\n                        Seed\n                    </button>\n                    <button\n                        onClick={this.slow}\n                        className={\"button\"}\n                    >\n                        Slow\n                    </button>\n                    <button\n                        onClick={this.speedUp}\n                        className={\"button\"}\n                    >\n                        Speed\n                    </button>\n                </div>\n                \n            </div>\n        )\n    } \n}\n\n\n//render main on the root node\nReactDOM.render(<Main/>, document.getElementById('root'));\n\n"],"sourceRoot":""}